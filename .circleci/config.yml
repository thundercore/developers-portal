version: 2.1

orbs:
  circle-compare-url: oshimayoan/compare-url@1.2.4

##############
# Executors  #
##############
executors:
  thunderci:
    working_directory: ~/project
    docker:
    - image: 085892847382.dkr.ecr.us-west-2.amazonaws.com/dev/apps-ci-docker

##############
# commands   #
##############
commands:
  basic_env:
    steps:
      - run:
          name: "Setup the environment"
          command: |
            NAME=`git log -1 --pretty=format:'%an'`
            IMAGE_TAG=`echo $CIRCLE_SHA1 | cut -c -8`
            MESSAGE=`git log --format=%B -n 1 $CIRCLE_SHA1`
            echo "export IMAGE_TAG=\"${IMAGE_TAG}\"" >> $BASH_ENV
            echo "export COMMIT_NAME=\"${NAME}\"" >> $BASH_ENV
            echo "export COMMIT_MESSAGE=\"${MESSAGE}\"" >> $BASH_ENV
  build:
    steps:
#      - run:
#          name: Install tools missing in apps-ci-docker
#          command: sudo apk add autoconf automake
      - restore_cache:
          name: "Restoring yarn cache"
          keys:
            - yarn-packages-{{ .Branch }}
      - circle-compare-url/reconstruct
      - circle-compare-url/use:
          step-name: build image and push to docker
          custom-logic: |
            echo "${SITENAME}"
            if [[ `git diff $COMMIT_RANGE "${SITENAME}" 2>&1` != "" ]];
              then
                echo "Install tools missing in apps-ci-docker"
                sudo apk add autoconf automake
                echo "Build docusaurus site"
                cd ${SITENAME} && yarn install && yarn build
            fi
#      - run:
#          name: Build docusaurus site
#          command: |
#            pwd
#            ls -la
#            echo ${SITENAME}
#            cd ${SITENAME} && yarn install && yarn build
      - save_cache:
          name: "Saving yarn cache"
          paths:
          - ~/.cache/yarn
          key: yarn-packages-{{ .Branch }}

  deploy:
    steps:
      - circle-compare-url/reconstruct
      - circle-compare-url/use:
          step-name: build image and push to docker
          custom-logic: |
            echo "${SITENAME}"
            if [[ `git diff $COMMIT_RANGE "${SITENAME}" 2>&1` != "" ]];
              then
                echo "Deploy to S3" 
                if [ "${ENV}" == "prod" ]; then
                  echo "Exporting production AWS access keys"
                  export AWS_ACCESS_KEY_ID=${AWS_APP_PROD_ACCESS_KEY_ID}
                  export AWS_SECRET_ACCESS_KEY=${AWS_APP_PROD_SECRET_ACCESS_KEY}
                  export AWS_DEFAULT_REGION=${AWS_APP_PROD_DEFAULT_REGION}
                fi
                ./deploy/deploy.sh
                ./redirect.sh
                SLACK_URL=${SLACK_URL} \
                COMMIT=${IMAGE_TAG} \
                AUTHOR=${COMMIT_NAME} \
                BUILD_URL=${CIRCLE_BUILD_URL} \
                MESSAGE=${COMMIT_MESSAGE} \
                APP_URL=${URL} \
                STATUS="SUCCESS" \
                deploy/notify.sh
            fi
#      - run:
#          name: Deploy to S3
#          command: |
#            if [ "${ENV}" == "prod" ]; then
#              echo "Exporting production AWS access keys"
#              export AWS_ACCESS_KEY_ID=${AWS_APP_PROD_ACCESS_KEY_ID}
#              export AWS_SECRET_ACCESS_KEY=${AWS_APP_PROD_SECRET_ACCESS_KEY}
#              export AWS_DEFAULT_REGION=${AWS_APP_PROD_DEFAULT_REGION}
#            fi
#            ./deploy/deploy.sh
#            ./redirect.sh
#      - run:
#          name: Build Success
#          when: on_success
#          command: |
#              # notify success
#              SLACK_URL=${SLACK_URL} \
#              COMMIT=${IMAGE_TAG} \
#              AUTHOR=${COMMIT_NAME} \
#              BUILD_URL=${CIRCLE_BUILD_URL} \
#              MESSAGE=${COMMIT_MESSAGE} \
#              APP_URL=${URL} \
#              STATUS="SUCCESS" \
#              deploy/notify.sh
      - run:
          name: Build Failed
          when: on_fail
          command: |
              SLACK_URL=${SLACK_URL} \
              COMMIT=${IMAGE_TAG} \
              AUTHOR=${COMMIT_NAME} \
              BUILD_URL=${CIRCLE_BUILD_URL} \
              MESSAGE=${COMMIT_MESSAGE} \
              deploy/notify.sh
  purge_cdn:
    steps:
      - circle-compare-url/reconstruct
      - circle-compare-url/use:
          step-name: build image and push to docker
          custom-logic: |
            echo "${SITENAME}"
            if [[ `git diff $COMMIT_RANGE "${SITENAME}" 2>&1` != "" ]];
              then
                echo "purge CloudFront cache"
                if [ "${ENV}" == "prod" ]; then
                  echo "Exporting production AWS access keys"
                  export AWS_ACCESS_KEY_ID=${AWS_APP_PROD_ACCESS_KEY_ID}
                  export AWS_SECRET_ACCESS_KEY=${AWS_APP_PROD_SECRET_ACCESS_KEY}
                  export AWS_DEFAULT_REGION=${AWS_APP_PROD_DEFAULT_REGION}
                fi
                aws cloudfront create-invalidation --distribution-id ${CDN_ID} --paths '/*'
            fi
#      - run:
#          name: purge CloudFront cache
#          command: |
#            if [ "${ENV}" == "prod" ]; then
#              echo "Exporting production AWS access keys"
#              export AWS_ACCESS_KEY_ID=${AWS_APP_PROD_ACCESS_KEY_ID}
#              export AWS_SECRET_ACCESS_KEY=${AWS_APP_PROD_SECRET_ACCESS_KEY}
#              export AWS_DEFAULT_REGION=${AWS_APP_PROD_DEFAULT_REGION}
#            fi
#            if [ "${SITENAME}" == "dev-portal" ]; then 
#              CDN_ID=${DISTRIBUTION_ID}
#            elif [ "${SITENAME}" == "sc-portal" ]; then 
#              CDN_ID=${SC_DISTRIBUTION_ID}
#            fi
#            aws cloudfront create-invalidation --distribution-id ${CDN_ID} --paths '/*'
  
##############
# Aliases    #
##############

master_branch_filter: &master_branch_filter
  filters:
    branches:
      only:
      - master

tag_filter: &tag_filter
  filters:
    tags:
      only: /^(\d+\.){2}\d+(-.*)?$/
    branches:
      ignore: /.*/

##############
# Workflows  #
##############

workflows:
  version: 2

  build-deploy-platform:
    jobs:
    - deploy-dev:
        name: dev-portal
        env: dev
        url: dev-portal.dev.tt-eng.com
        A_url: dev-portal.dev.tt-eng.com
        B_url: sc-portal.dev.tt-eng.com
        protocal: http
        sitename: dev-portal
        aws_s3_region: us-west-2 
        <<: *master_branch_filter
    - deploy-dev:
        name: sc-portal
        env: dev
        url: sc-portal.dev.tt-eng.com
        A_url: dev-portal.dev.tt-eng.com
        B_url: sc-portal.dev.tt-eng.com
        protocal: http
        sitename: sc-portal
        aws_s3_region: us-west-2 
        <<: *master_branch_filter
    - deploy-dev:
        name: dev-portal-cn
        env: dev
        url: dev-portal-cn.dev.tt-eng.com
        A_url: dev-portal-cn.dev.tt-eng.com
        B_url: sc-portal-cn.dev.tt-eng.com
        protocal: http
        sitename: dev-portal-cn
        aws_s3_region: us-west-2
        <<: *master_branch_filter
    - deploy-dev:
        name: sc-portal-cn
        env: dev
        url: sc-portal-cn.dev.tt-eng.com
        A_url: dev-portal-cn.dev.tt-eng.com
        B_url: sc-portal-cn.dev.tt-eng.com
        protocal: http
        sitename: sc-portal-cn
        aws_s3_region: us-east-1
        <<: *master_branch_filter


  build-deploy-prod:
    jobs:
    - deploy-prod:
        env: prod
        url: developers.thundercore.com
        A_url: developers.thundercore.com 
        B_url: support-center.thundercore.com 
        protocal: https
        sitename: dev-portal
        aws_s3_region: ap-south-1
        cdn_id: ${DISTRIBUTION_ID}
        <<: *tag_filter
    - deploy-prod:
        env: prod
        url: support-center.thundercore.com
        A_url: developers.thundercore.com 
        B_url: support-center.thundercore.com
        protocal: https
        sitename: sc-portal
        aws_s3_region: us-east-1
        cdn_id: ${SC_DISTRIBUTION_ID}
        <<: *tag_filter
    - deploy-prod:
        env: prod
        url: developers-cn.thundercore.com
        A_url: developers-cn.thundercore.com
        B_url: support-center-cn.thundercore.com
        protocal: https
        sitename: dev-portal-cn
        aws_s3_region: ap-south-1
        cdn_id: ${CN_DISTRIBUTION_ID}
        <<: *tag_filter
    - deploy-prod:
        env: prod
        url: support-center-cn.thundercore.com
        A_url: developers-cn.thundercore.com
        B_url: support-center-cn.thundercore.com
        protocal: https
        sitename: sc-portal-cn
        aws_s3_region: us-east-1
        cdn_id: ${CN_SC_DISTRIBUTION_ID}
        <<: *tag_filter


##############
# Jobs       #
##############
jobs:
  test:
    executor: thunderci
    steps:
    - checkout
    - build

  deploy-dev:
    executor: thunderci
    parameters:
      url:
        type: string
      A_url:
        type: string
      B_url:
        type: string
      env:
        type: string
      sitename:
        type: string
      protocal:
        type: string
      aws_s3_region:
        type: string
    environment:
      URL: << parameters.url >>
      A_URL: << parameters.A_url >>
      B_URL: << parameters.B_url >>
      ENV: << parameters.env >>
      SITENAME: << parameters.sitename >>
      PROTOCAL: << parameters.protocal >>
    steps:
    - checkout
    - basic_env
    - build
    - deploy

  deploy-prod:
    executor: thunderci
    parameters:
      url:
        type: string
      A_url:
        type: string
      B_url:
        type: string
      env:
        type: string
      sitename:
        type: string
      protocal:
        type: string
      aws_s3_region:
        type: string
      cdn_id:
        type: string
    environment:
      URL: << parameters.url >>
      A_URL: << parameters.A_url >>
      B_URL: << parameters.B_url >>
      ENV: << parameters.env >>
      SITENAME: << parameters.sitename >>
      PROTOCAL: << parameters.protocal >>
      AWS_S3_REGION: << parameters.aws_s3_region >> 
      CDN_ID: << parameters.cdn_id >> 
    steps:
    - checkout
    - basic_env
    - build
    - deploy
    - purge_cdn
